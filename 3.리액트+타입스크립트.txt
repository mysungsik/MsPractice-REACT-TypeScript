[반드시 필수]

1. useRef, useState, 등등 의 "타입"을 전부 외울 수는 없다.
    그냥 치던대로 치고, 마우스를 위로 올려보면, 위에 타입을 어떻게 설정해야 하는지 나온다!!

    외우지 말고, 보고 치자.

==========================================================================================================================================

1. 리액트와 함께 타입스크립트 사용하기

    https://ko.reactjs.org/docs/static-type-checking.html#adding-typescript-to-a-project

    <만들때 설치>
        npx create-react-app my-app --template typescript

            끝



    <수동 설치 = 만들고 설치>==================================================================================================================

        npm install --save-dev typescript

        [만약 수동설치를 한다면 해야할 설정들]========================

            <타입스크립트 컴파일러 설정>
                https://ko.reactjs.org/docs/static-type-checking.html#configuring-the-typescript-compiler

                컴파일러는 무엇을 해야할지 설정해주지 않는다면 아무 도움도 주지 않습니다. TypeScript는 tsconfig.json이라는 특별한 파일에 설정을 해야 합니다.

                [설정파일열기]
                    npx tsc --init

                    많은 옵션 중에서 rootDir와 outDir를 살펴보려고 합니다.
                    
                    우선 프로젝트 구조를 아래와 같이 정리합니다. 모든 소스코드는 src 디렉토리에 위치시킬 것입니다.

                        ├── package.json
                        ├── src
                        │   └── index.ts
                        └── tsconfig.json

                    그 다음, 소스코드가 어디 있는지, 캄파일을 통해 생성된 코드를 어디에 위치시켜야 하는지 컴파일러에 서술합니다.
                        // tsconfig.json

                        {
                            "compilerOptions": {
                                // ...
                                "rootDir": "src",
                                "outDir": "build"
                                // ...
                            },
                        }

                [파일 확장자]

                    React에서는 대부분 컴포넌트를 .js 파일에 작성합니다. TypeScript에는 두가지 확장자가 있습니다.

                    .ts는 TypeScript 파일 확장자 기본값입니다. 반면에 .tsx는 JSX 문법이 포함된 코드를 위한 특별한 확장자입니다.

    ========================================================================================================================================================


2. 만들고 나면

"자바스크립트는 tsx 로 변경"되어있고,

패키지에는
"@types/jest": "^27.5.2",
"@types/node": "^16.18.10",
"@types/react": "^18.0.26", 가 추가되어있다.

파일에는
"react-app-env.d.ts" 도 추가되어있다 

만든 "리액트 + 타입스크립트 앱"에서는,
"타입스크립트의 자바스크립트 컴파일이 자동"으로 이루어지고,
"tsx 코드를 사용해, JSX 코드 변환을 하여, 리액트에서 활용가능"하다.
"react-app-env.d.ts" 는 타입스크립트의 리액트와 연결고리 같은 것이다.

3. 대부분은, "타입스크립트의 타입추론"에 의해 해결되기에, 크게 달라지는 것은 없다.
        
4. props 를 받는, 하위 컴포넌트에서의 타입 [ 제네릭의 사용 ]

    "기본적인 props 받을 수 있다."

        
        const Todos = (props:{ items: string[]; amount:number }[] ) => {
            return ( 
                    ...

    
        props:{}[]                              // props 가 객체와 배열의 혼합이고

        props:{items:string[]; amount:number}   // 객체 안에는 items 라는 스트링타입의 배열이, 
                                                // amount 라는 number 타입의 값이 있다는 말이다.

    "그러면 children은?"

        어떤 것을 받을지도, 아무것도 정해져 있지 않는 타입을 써야한다.

        그것을 위해, 타입스크립트는, "함수형 컴포넌트(Funtional Component)" 라는 "결과값의 타입을 정하는 기능"을 넣었다

        ** 이렇게 말하지만, "타입스크립트가 만든 props 를 사용하기위한 특수한 타입" 이라고 보아도 무방하다.

    그것은 바로 React.FC 이다.

        import React from "react"

        const Todos:React.FC<{}> = (props) => {     // Todos 함수형컴포넌트(FC) 에, React.FC 라는 타입을 정하고, 
            return (                                // <{}> 을 붙여, "props 로 받을 객체의 타입" 을 정한다.

            )
        }

5. props 받기 예시

    [1) 이런식이라든가]

        import React from "react";

        const Todos: React.FC<{ items: string[]; amount: number }> = (props) => {     // Todos 함수형컴포넌트(FC) 에, React.FC 라는 타입을 정하고,
          
            return (
                <ul>
                    <li>{props.items}</li>      // 자동 완성이 나온다.
                    <li> {props.amount}</li>
                </ul>
            
            );
        };
        export default Todos;


    [2) 요런 식이라든가]

        import React from "react";

        const Todos: React.FC<{ items: string[]; amount: number }> = (props) => {    // Todos 함수형컴포넌트(FC) 에, React.FC 라는 타입을 정하고,
       
            return (
                <ul>
                    {props.items.map((item) => (    // items.map() 이 자동완성으로 나온다. [Array 인게 명확하기 때문에]
                        <li>{item}</li>
                    ))}
                </ul>
            );
        };
        export default Todos;

    <App.js>
        import Todos from "./components/Todos";

        function App() {
            return (
                <div className="App">
                    <Todos items={["sd", "gf"]} amount={3} />
                </div>
            );
        }

        export default App;



    ** 장점 : 
        타입이 확실히 정해지기 때문에, 자동완성으로 메서드들이 나온다
            "Array" 이면 ".map" 이라든가, ".filter" 라든가 하는것들

6. 만약 복잡복잡한 item 들( 배열에 객체가 있는데, 객체 안의 프로퍼티가 수십가지라면!?) 을 props 로 받았다면, 타입을 일일이 다 정하나!?

    그렇지 않다.

    "type 을 정하는" 
        type Person = { name:string, age:number} 를 기억하나?

    "외부에 타입을 정해서", "복잡한 형태의 props" 를 받을때 가져오면 된다.

    [ 일단 타입이 두가지 ]

        import React from "react";

        const Todos: React.FC<{ items: {name:string, age:number}[]; amount: number }> = (props) => {
            return (
                <div>
                    <ul>
                        {props.items.map((item) => (
                        <li>{item.name}</li>
                        ))}
                    </ul>
                </div>
            );
        };
        export default Todos;
        

    =>  props 를 받는데,
        props는 당연히 객체형이다 React.FC <{}>

        props 안에는 두개의 객체가 있다. 그것의 타입은 각각, 배열객체와, 숫자 이다.

            배열객체 items 안의 타입은      items: {name:string,age:number}[]
            숫자 amount 의 타입은 당연히    amount: number
         

        근데, items 안에 담긴 프로퍼티가 name, age, address, phone, id, .... 등 수십가지라면?

        저 items 를 받는 props 로 받는 컴포넌트함수 안에서는 얼마나 많은 정의를 해야할까?

        그런 복잡성을 피하기 위해, "type 을 외부에서 정의하고, 사용해보자"

7. 타입의 아웃소싱

    < 이렇게 복잡하게 타입을 지정하지 말고 > ===================================

        import React from "react";

        const Todos: React.FC<{
            items: { name: string; age: number; address: string; phone: number }[];
            amount: number;
        }> = (props) => {
            return (
                <div>
                    <ul>
                        {props.items.map((item) => (
                            <li>{item.name}</li>
                        ))}
                    </ul>
                </div>
            );
        };
        export default Todos;
 

    =========================================================================================================    

    < models / todos.ts >       // 컴포넌트함수 만들거 아니니까 그냥 ts 로 했다.

        export type Todo = {
            name: string;
            age: number;
            address: string;
            phone: number;
        };

    < components/todos.tsx >

        import React from "react";
        import { Todo } from "../models/todos";

        const Todos: React.FC<{ items: Todo[]; amount: number; }> = (props) => {
            return (
                <div>
                    <ul>
                        {props.items.map((item) => (
                        <li>{item.name}</li>
                        ))}
                    </ul>
                </div>
            );
        };
        export default Todos;


    => 당연한 장점 : 
        1. 코드가 복잡해지지 않는다.
        2. 다른곳에서 props 를 쓸 때에도, 아웃소싱한 type 을 사용할 수 있다.
        3. 타입이 확실하니, 메서드도 자동완성이 되고, 값도 자동완성이 된다.

    ============================================================================================================================================ 

    [외부에 타입을 정하기 싫다면 컴포넌트의 컴포넌트 함수 바깥에 정의해서 사용해도 무방하다]

        import React from "react";
        import { Todo } from "../models/todos";

        type Todo = {
            name: string;
            age: number;
            address: string;
            phone: number;
        };

        const Todos: React.FC<{ items: Todo[]; amount: number; }> = (props) => {
            return (
                <div>
                    <ul>
                        {props.items.map((item) => (
                        <li>{item.name}</li>
                        ))}
                    </ul>
                </div>
            );
        };
        export default Todos;

    

8. props.children 사용해보기 [정답은 모름 내가 그냥 이렇게 사용한다.]

    <레이아웃 컴포넌트 만들기>

        const Layout: React.FC<{ children: any }> = (props) => {    // children 에 any 를 넣어버렸다.
            return (
                <div>
                    <h1> 이게 헤더? </h1>
                        {props.children}        // 그냥 any 로 받은 children 을 사용했따.
                    <h1> 이게 푸터? </h1>
                </div>
            );
        };
        
        export default Layout;

    < index.tsx >

        import ReactDOM from "react-dom/client";
        import "./index.css";
        import App from "./App";
        import Layout from "./layout/layout";

        const root = ReactDOM.createRoot(
        document.getElementById("root") as HTMLElement
        );
        root.render(
            <Layout>
                <App />
            </Layout>
        );

                
9. App.js -> Todos -> TodoItem 으로 이어지는, 간단한(항상 하던) 배열 컴포넌트 만들기

    <App.js>

        import Todos from "./components/Todos";

        const items = [
           { name: "ms", age: 3, address: "csd-x5", phone: 323 },
           { name: "cs", age: 5, address: "csd-x7", phone: 2323 },
        ];

        function App() {
            return (
                <div className="App">
                    <Todos items={items} amount={3} />
                </div>
            );
        }

        export default App;

    <Todos.js>  ``

        import React from "react";      // 선택사항이다. 굳이 import 안해도 된다.
        import TodoItems from "./TodoItems";

        import { Todo } from "../models/todos";

        const Todos: React.FC<{     // props 로 받은 것은, 배열객체 타입의 items 와, 숫자 타입의 amount
            items: Todo[];          // items 의 "타입지정"은 "modles/todos.ts" 에서 "아웃소싱" 타입 별칭(Type aliases) 에일리어스
            amount: number;
        }> = (props) => {

            return (
                <div>
                    <ul>
                        {props.items.map((item) => (        // 직접 여기에서 li 만들어서 사용
                            <li key={item.phone}>{item.name}</li>
                        ))}
                    </ul>
                    <div>
                        <ul>
                            {props.items.map((item) => (        // 평소처럼, Item(단일항목) 컴포넌트를 만들어서, 배열을 만들기
                                <TodoItems key={item.phone} todoName={item.name} />
                            ))}
                        </ul>
                    </div>
                </div>
            );
        };

        export default Todos;

    <TodoItems.js>

        import React from "react";

        const TodoItems: React.FC<{ todoName: string }> = (props) => {  // props 로 받은 것은, string 타입의 todoName 뿐!
            return <div>{props.todoName}</div>;
        };

        export default TodoItems;

10. 타입스크립트의 양식 제출

11. 상향식 State 전달

12. State 다루기

    1) state에 대한, "타입"을 명명해야한다.

    
        < App.js >
                const items = [
                    { name: "ms", age: 3, address: "csd-x5", phone: 323 },
                    { name: "cs", age: 5, address: "csd-x7", phone: 2323 },
                ];
                
                function App() {
                    const [todo, setTodo] = useState<{ name: string; age: number; address: string; phone: number }[]>([]);

    2) 근데 계속 쓰는 타입이다. 아웃소싱한 타입을 이용하자

        < App.js >
                import { Todo } from "./models/todos";

                const items = [
                { name: "ms", age: 3, address: "csd-x5", phone: 323 },
                { name: "cs", age: 5, address: "csd-x7", phone: 2323 },
                ];

                function App() {
                    const [todo, setTodo] = useState<Todo[]>([]);

        <models / todos.ts >
            
                export type Todo = {
                    name: string;
                    age: number;
                    address: string;
                    phone: number;
                };
                

    3) [총정리] 함수를 하위컴포넌트로 넘겨, 하위에서 받은 값으로, 상위에서 State 에 저장. with useState, useRef


        <models / todos.ts > ===================================================
            
                export type Todo = {
                    name: string;
                    age: number;
                    address: string;
                    phone: number;
                };

        < App.tsx > ===================================================
                import NewTodo from "./components/NewTodo";
                import { useState } from "react";
                import { Todo } from "./models/todos";      // type 아웃소싱


                function App() {
                    const [todo, setTodo] = useState<Todo[]>([]);   // useState 안에 들어갈 todo 의 타입 지정

                    const onAddTodo = (todos: Todo) => {        // 하위 컴포넌트로 넘길 함수, 받아올 값 타입지정
                        setTodo((prev) => [...prev, todos]);
                    };

                    console.log(todo);

                    return (
                        <div className="App">
                            <NewTodo onAddTodo={onAddTodo} />       // 넘기고
                        </div>
                    );
                }

                export default App;


        < Component / Newtodo.tsx> ===================================================

                import { useRef } from "react";
                import { Todo } from "../models/todos";
                
                const NewTodo: React.FC<{ onAddTodo: (todos: Todo) => void }> = (props) => {    // 받아올 함수 타입지정, 파라미터 타입지정
                                                                                                // void 는 return 값이 없어서 생긴 타입
                    const textRef = useRef<HTMLInputElement>(null);     // html input 타입지정         
                
                    const submitHandler = (event: React.FormEvent) => {         // event 타입 지정
                        event.preventDefault();
                    
                        const name = textRef.current!.value;    // ! 를 사용해야만, "타입" 이 올바르게 명명된다.
                        const age = 23;                     // 나머지는 그냥, 했다 치고
                        const address = "ss";
                        const phone = 1233;
                    
                        props.onAddTodo({ name, age, address, phone });     // 받은 함수로 넘겨준다.
                    };
                    
                    return (
                        <form onSubmit={submitHandler}>
                            <div>
                                <label htmlFor="todoText"></label>
                                <input type={"text"} id={"todoText"} ref={textRef} />
                            </div>
                            <div>
                                <button> 제출 </button>
                            </div>
                        </form>
                    );
                };
                
                export default NewTodo;
                

13. 스타일링 지정하기

14. 할일 State 지우는 함수 만들어보기 (With 상향식 State 전달, func.bind() )

    < App.tsx >

        function App() {
                ...

            const removeTodo = (todoName: string) => {
                const newArray = todo.filter((item) => item.name !== todoName);
                setTodo([...newArray]);
            };
            
            return (
                <div className="App">
                <Todos items={todo} removeTodo={removeTodo} />
                <NewTodo onAddTodo={onAddTodo} />
                </div>
            );

    < Todos.tsx >

            const Todos: React.FC<{
                items: Todo[];
                removeTodo: (todoName: string) => void;
            }> = (props) => {
            
                return (
                <div>
                    <div>
                    <ul>
                        {props.items.map((item) => (
                        <TodoItems key={item.phone} todoName={item.name}  removeTodo={props.removeTodo}/>
                        ))}
                    </ul>

    < TodoItem.tsx >

            const TodoItems: React.FC<{
                todoName: string;
                removeTodo: (todoName: string) => void;
            }> = (props) => {
                const deleteHandler = (name: string) => {
                    props.removeTodo(name);
                };
            
                return (
                    <div>
                        {props.todoName}
                        <button onClick={deleteHandler.bind(null, props.todoName)}> 삭제</button>
                    </div>
                );
            };
            
            export default TodoItems;
            
15. context 와 타입스크립트

    < createContext >

        import { useState } from "react";
        import { createContext } from "react";

        const msContext = createContext<{ name: string; addTodo: (textId: string) => void; }>(
            {
            name: "ms",
            addTodo: (textId) => {
                return textId;
            },
        });

        export const msContextProvider: React.FC<{ children: React.ReactNode }> = (props) => {
            const [name, setName] = useState("");

            const addTodo = (textId: string) => {
                return textId;
            };

            const context: { name: string; addTodo: (textId: string) => string;} = {
                name: name,
                addTodo: addTodo,
            };

            return (
                <msContext.Provider value={context}> 
                    {props.children}
                </msContext.Provider>
            );
        };

        export default msContext


    // 이후에, App.js 감싸고, 컴포넌트에서 사용하면 된다.
    
    // 사용은 평소대로, 필요한 것이 있다면, 마우스를 위로 살포시 올려보자. 알려줄 것이다.









                                    



